// vim: ft=groovy
def pom = null
def version = null
def stagingPort = 8080
def productionPort = 8080
pipeline {
  agent {
    label "maven"
  }
  //{
    //kubernetes {
    // docker image maven:3.5
    // docker image docker with bind mount -or- buildah bud in privileged container
    //}
  //}
  stages {
    stage("Build") {
      steps {
        script {
          pom = readMavenPom file: 'pom.xml'
          version = pom.getVersion()
        }
        sh "./mvnw -B package -DskipTests"
      }
    }
    stage("Test") {
      steps {
        sh "./mvnw -B -e -DforkCount=0 test"
        junit "target/surefire-reports/*.xml"
        archive includes: "target/*.jar"
        script {
          def sonarPath = tool "sonarqube-scanner"
          withSonarQubeEnv("sonar") {
            sh "${sonarPath}/bin/sonar-scanner"
          }
        }
      }
    }
    stage("Create docker image") {
      steps {
        // openshift build Dockerfile?
        openshiftBuild bldCfg: 'spring-petclinic-build-image', checkForTriggeredDeployments: 'false', showBuildLogs: 'true', verbose: 'false'
      }
    }
    stage("Deploy to staging") {
      steps {
        openshiftTag srcStream: "spring-petclinic", srcTag: "latest", destinationStream: "spring-petClinic", destinationTag: "staging"

        // TODO: insert version number into deployment
        //sh "sed 's/__VERSION__/${version}-${currentBuild.number}/' infra/staging/petclinic-deployment.yml | kubectl apply -f -" 
        //sh "kubectl rollout status -n petclinic-staging deploy/spring-petclinic -w"
      }
    }
    stage("Test deployment in staging") {
      steps {
        sh "curl http://petclinic-svc.petclinic-staging.svc.cluster.local:${stagingPort}"
        // RUN a performance test using eg. Gatling here
      }
    }
    stage("Deploy to prod") {
      steps {
        // TODO: insert version number into deployment
        sh "sed 's/__VERSION__/${version}-${currentBuild.number}/' infra/production/petclinic-deployment.yml | kubectl apply -f -" 
        sh "kubectl rollout status -n petclinic-production deploy/spring-petclinic -w"
      }
    }
    stage("Test deployment in production") {
      steps {
        sh "curl http://petclinic-svc.petclinic-production.svc.cluster.local:${productionPort}"
        // RUN a performance test using eg. Gatling here
      }
    }
  }
  post {
    always {
      archive includes: "target/surefire-reports/*"
      archive includes: "/tmp/**"
      sh "ls -lR"
    }
  }
}
